// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: users.sql

package database

import (
	"context"
	"time"
)

const createUser = `-- name: CreateUser :exec
INSERT INTO users (user_id, membership_type, access_token, refresh_token, token_expiry, created_at, updated_at)
VALUES (
    ?,
    ?,
    ?,
    ?,
    ?,
    ?,
    ?
)
`

type CreateUserParams struct {
	UserID         string
	MembershipType int64
	AccessToken    string
	RefreshToken   string
	TokenExpiry    time.Time
	CreatedAt      time.Time
	UpdatedAt      time.Time
}

func (q *Queries) CreateUser(ctx context.Context, arg CreateUserParams) error {
	_, err := q.db.ExecContext(ctx, createUser,
		arg.UserID,
		arg.MembershipType,
		arg.AccessToken,
		arg.RefreshToken,
		arg.TokenExpiry,
		arg.CreatedAt,
		arg.UpdatedAt,
	)
	return err
}

const getUser = `-- name: GetUser :one

SELECT user_id, membership_type, access_token, refresh_token, token_expiry, created_at, updated_at FROM users WHERE user_id = ?
`

func (q *Queries) GetUser(ctx context.Context, userID string) (User, error) {
	row := q.db.QueryRowContext(ctx, getUser, userID)
	var i User
	err := row.Scan(
		&i.UserID,
		&i.MembershipType,
		&i.AccessToken,
		&i.RefreshToken,
		&i.TokenExpiry,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const updateToken = `-- name: UpdateToken :exec

UPDATE users
SET access_token = ?,
    updated_at = ?,
    refresh_token = ?,
    token_expiry = ?
WHERE user_id = ?
`

type UpdateTokenParams struct {
	AccessToken  string
	UpdatedAt    time.Time
	RefreshToken string
	TokenExpiry  time.Time
	UserID       string
}

func (q *Queries) UpdateToken(ctx context.Context, arg UpdateTokenParams) error {
	_, err := q.db.ExecContext(ctx, updateToken,
		arg.AccessToken,
		arg.UpdatedAt,
		arg.RefreshToken,
		arg.TokenExpiry,
		arg.UserID,
	)
	return err
}
